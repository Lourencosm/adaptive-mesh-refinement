/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    system;
    object      preProcess;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

functions
{
    createRefVal
    {
        name    createRefVal;
        type    coded;
        libs    (utilityFunctionObjects);
        enabled yes;

        codeEnd
        #{
            Info<< "Started creating refVal field\n" << endl;

            // Create a volume scalar field (refVal will be a scalar, not a vector)
            volScalarField refVal
            (
                IOobject
                (
                    "refVal",
                    mesh().time().timeName(),
                    mesh(),
                    IOobject::READ_IF_PRESENT,
                    IOobject::AUTO_WRITE
                ),
                mesh(),
                dimensionedScalar("refVal", dimensionSet(0, 2, -2, 0, 0, 0, 0), Zero)
            );

            // Create a scalar field that contains the volume of each cell within the mesh
            const scalarField& v = mesh().V();



            // refinement based on normalized pressure gradient
            //const volScalarField& p = mesh().lookupObject<volScalarField>("p");
            //const volScalarField& magGradp = mag(fvc::grad(p));




            // refinement based on normalized curl of the velocity field

            // Read the velocity field
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            // calculate the curl of the flow and then take the magnitude of it
            const volScalarField& magCurlU = mag(fvc::curl(U));


            // For each cell, multiply the refinement value with the third root of the cell volume (which is an estimation of the cell length)
            // This is to discourage the algorithm to keep refining cells that are already small

            forAll(refVal, celli)
            {
                // For gradient of pressure, use the line below
                //refVal[celli] = pow(v[celli], 1.0/3.0) * magGradp[celli];

                // For curl of velocity, use the line below
                refVal[celli] = pow(v[celli], 1.0/3.0) * magCurlU[celli];
            }

            refVal.write();

            Info<< "Finished creating refVal field\n" << endl;
            
        #};
    }
}


// ************************************************************************* //