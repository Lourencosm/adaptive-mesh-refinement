#!/bin/bash
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------

refinement='-case ../primal_refinement'

declare -a polyMeshFields=("boundary" "cellLevel" "cellZones" "faces" "faceZones" "level0Edge" "neighbour" "owner" "pointLevel" "points" "pointZones")

prepareCastellatedMesh()
{
    local dict=system/snappyHexMeshDict
    local path=castellatedMeshControls.refinementSurfaces.motorBike
    foamDictionary $dict -entry snap -set false
    foamDictionary $dict -entry $path.faceType -add baffle
    foamDictionary $dict -entry $path.faceZone -add motorBike_zone
    foamDictionary $dict -entry $path.patchInfo -remove
}

prepareForSnapping()
{
    local dict=system/snappyHexMeshDict
    local path=castellatedMeshControls.refinementSurfaces.motorBike
    foamDictionary $dict -entry $path.faceType -remove
    foamDictionary $dict -entry $path.faceZone -remove
    foamDictionary $dict -entry snap -set true
    foamDictionary $dict -entry $path.patchInfo -add "{type wall; inGroups (motorBikeGroup);}"
}

# Alternative decomposeParDict name:
decompDict="-decomposeParDict system/decomposeParDict.6"
## Standard decomposeParDict name:
unset decompDict

# copy motorbike surface from resources directory
\cp ./geometry/motorBike.obj.gz constant/triSurface/
runApplication surfaceFeatureExtract

runApplication blockMesh

runApplication $decompDict decomposePar

# we need non-snapped mesh for pimpleFoam refinement
prepareCastellatedMesh
runParallel $decompDict -s "castellated" snappyHexMesh -overwrite
runParallel $decompDict -s "castellated" checkMesh -writeFields '(nonOrthoAngle)' -constant

ls -d processor* | xargs -I {} rm -f {}/constant/polyMesh/faceZones

# copy non-snapped mesh for the refinement
cp -R processor* ../primal_refinement
# copy blockMesh
cp -R constant/polyMesh ../primal_refinement/constant/polyMesh

prepareForSnapping
runParallel $decompDict -s "snapped" snappyHexMesh -overwrite
runParallel $decompDict -s "snapped" checkMesh -writeFields '(nonOrthoAngle)' -constant

runParallel $decompDict topoSet

#- For parallel running: set the initial fields
restore0Dir -processor

runParallel $decompDict -s "beforeRefinement" potentialFoam -writephi
runParallel $decompDict -s "beforeRefinement" checkMesh -writeFields '(nonOrthoAngle)' -constant

runParallel $decompDict $(getApplication)

ls -d processor* | xargs -I {} \
    cp -R ./0.orig ../primal_refinement

cd ../primal_refinement

# Refine over curl(U) or grad(p) in one pass

ls -d processor* | xargs -I {} \
            rm -Rf ./{}/0

ls -d processor* | xargs -I {} \
            cp -R ./0.orig ./{}/0

ls -d processor* | xargs -I {} \
    foamDictionary {}/0/include/initialConditions \
    -entry flowVelocity -set "(0 0 0)"

runParallel $decompDict -s "refinement" mapFieldsPar -sourceTime 'latestTime' \
    -fields '(p U k nut omega)' ../primal_run

# calculate refVal field for refinement
runParallel -s "refVal" $decompDict pimpleFoam -postProcess \
    -dict system/preProcess -latestTime

runParallel $decompDict pimpleFoam

# copy refined mesh to constant/polyMesh
for file in "${polyMeshFields[@]}"
do
    ls -d processor* | xargs -I {} \
        cp -rf ./{}/1/polyMesh/$file \
        ./{}/constant/polyMesh/
    ls -d processor* | xargs -I {} \
        sed -i "s/1\/polyMesh/constant\/polyMesh/g" \
        ./{}/constant/polyMesh/$file
done

# remove refinementHistory
ls -d processor* | xargs -I {} \
    rm -Rf ./{}/0/polyMesh/refinementHistory

# remove data from initial run
rm -Rf ../primal_run/processor*

# create processorN/constant/polyMesh directories
ls -d processor* | xargs -I {} \
    mkdir -p ../primal_run/{}/constant/polyMesh

# copy refined mesh to primal_run
ls -d processor* | xargs -I {} \
                cp -R ./{}/constant/polyMesh \
                ../primal_run/{}/constant

cd ../primal_run

for file in "${polyMeshFields[@]}"
do
ls -d processor* | xargs -I {} \
    sed -i "s/0\/polyMesh/constant\/polyMesh/g" \
    ./{}/constant/polyMesh/$file
done

runParallel $decompDict -s "AfterRefinement" snappyHexMesh -overwrite

runParallel $decompDict -s "AfterRefinement" topoSet

restore0Dir -processor

runParallel $decompDict -s "AfterRefinement" potentialFoam -writephi
runParallel $decompDict -s "AfterRefinement" checkMesh -writeFields '(nonOrthoAngle)' -constant

runParallel $decompDict -s "AfterRefinement" $(getApplication)

runApplication reconstructParMesh -constant
runApplication reconstructPar -latestTime

touch foam.foam


#------------------------------------------------------------------------------
